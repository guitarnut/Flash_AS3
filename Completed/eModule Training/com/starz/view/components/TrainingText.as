package com.starz.view.components{	import flash.display.MovieClip;	import flash.media.Sound;	import com.greensock.TweenLite;	import flash.events.Event;	import com.starz.audio.AudioManager;	import com.starz.view.screens.base.TrainingScreen;	import com.greensock.TimelineLite;	import flash.events.MouseEvent;	public class TrainingText extends MovieClip	{		private static const TWEEN_SPEED:Number = .25;		private var _mp3:Sound;		private var _audio:AudioManager;		private var _additionalImages:Array;		private var _delayTextbox:Boolean;		private var _goBack:Boolean = false;		public function TrainingText()		{			init();		}		private function init():void		{			alpha = 0;			scaleX = .01;			scaleY = .01;			textMask.scaleX = 0;			_delayTextbox = false;			_audio = new AudioManager();			b_previous.addEventListener(MouseEvent.CLICK, handleButtonClick);			//b_replay.addEventListener(MouseEvent.CLICK, handleButtonClick);			b_next.addEventListener(MouseEvent.CLICK, handleButtonClick);						//Get rid of the replay button for now			b_next.x = b_replay.x;			b_replay.x = -1000;			hideButtons();			addEventListener(Event.ENTER_FRAME, showText);		}		public function delayTextbox():void		{			_delayTextbox = true;		}		public function showTextbox():void		{			_delayTextbox = false;			showText();		}		private function showText(e:Event = null):void		{			if (! _delayTextbox)			{				removeEventListener(Event.ENTER_FRAME, showText);				var animation:TimelineLite = new TimelineLite();				animation.append(new TweenLite(this, .2, {alpha:1}));				animation.append(new TweenLite(this, .25, {scaleX:1}));				animation.append(new TweenLite(this, .25, {scaleY:1, onComplete:animateText}));				animation.play();			}		}		private function animateText():void		{			new TweenLite(textMask,TWEEN_SPEED * 2,{scaleX:1,onComplete:playAudio});		}		private function playAudio():void		{			if (_mp3)			{				_audio.playAudio(_mp3);				_audio.addEventListener(Event.COMPLETE, audioComplete);			}			else			{			}		}		private function audioComplete(e:Event):void		{			_audio.removeEventListener(Event.COMPLETE, audioComplete);			showButtons();		}		private function hideExtras():void		{			if (_additionalImages)			{				for (var i:Number = 0; i< _additionalImages.length; i++)				{					new TweenLite(_additionalImages[i],TWEEN_SPEED,{alpha:0});				}			}			hideText();		}		private function hideText():void		{			var animation:TimelineLite = new TimelineLite();			animation.append(new TweenLite(textMask,TWEEN_SPEED*2,{scaleX:0, delay: TWEEN_SPEED}));			animation.append(new TweenLite(this, .25, {scaleY:.01}));			animation.append(new TweenLite(this, .25, {scaleX:0}));			animation.append(new TweenLite(this, .25, {alpha:0, onComplete:playNext}));			animation.play();		}		private function showButtons():void		{			b_previous.showButton();			b_replay.showButton(.25);			b_next.showButton(.5);			if (TrainingScreen(this.parent).currentFrame == 1)			{				if (b_previous.x != -1000)				{					b_next.x = b_previous.x;					//b_replay.x = b_previous.x;					b_previous.x = -1000;				}			}		}		private function hideButtons():void		{			b_previous.hideButton();			b_replay.hideButton();			b_next.hideButton();		}		private function handleButtonClick(e:MouseEvent):void		{			switch (e.target.name)			{				case 'b_previous' :					_goBack = true;					hideExtras();					break;				case 'b_replay' :					playAudio();					break;				case 'b_next' :					_goBack = false;					hideExtras();					break;			}			hideButtons();		}		private function playNext():void		{			_mp3 = null;			if (_goBack)			{				TrainingScreen(this.parent).previousScreen();			}			else			{				TrainingScreen(this.parent).advanceScreen();			}		}		public function addExtras(a$:Array):void		{			_additionalImages = a$;		}		public function set audio(a$):void		{			_mp3 = a$;		}	}}