package com.starz.view.screens.base{	import flash.display.MovieClip;	import com.greensock.TweenLite;	import com.starz.events.TrainingEvent;	import flash.media.Sound;	import flash.events.Event;	import com.starz.audio.AudioManager;	import com.starz.constants.ApplicationSettings;	public class TrainingScreen extends MovieClip	{		protected static const TWEEN_SPEED:Number = .5;		protected var _audio:AudioManager;		protected var _music:AudioManager;		protected var _stage:MovieClip;		public function TrainingScreen()		{			addEventListener(Event.ADDED_TO_STAGE, init);		}		private function init(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			stop();			MovieClip(this.parent).stop();			x = ApplicationSettings.STAGE_WIDTH / 2;			y = ApplicationSettings.STAGE_HEIGHT / 2;			alpha = 0;			_audio = new AudioManager();			_music = new AudioManager();			addListeners();		}		private function addListeners():void		{			addEventListener(Event.ENTER_FRAME, checkStatus);		}		private function removeListeners():void		{			removeEventListener(Event.ENTER_FRAME, checkStatus);		}		public function playAudio(a$:*, advanceWhenComplete:Boolean = true):void		{			if (advanceWhenComplete)			{				_audio.addEventListener(Event.COMPLETE, audioCompleteAdvance);			}			else			{				_audio.addEventListener(Event.COMPLETE, audioComplete);			}			//Stop any previous sounds			_audio.stopAudio();			_audio.playAudio(a$);		}		public function stopAudio():void		{			_audio.stopAudio();		}		public function playMusic(a$:*, v$:Number = .05, loop:Boolean = true):void		{			_music.playMusic(a$, v$, loop);		}		public function lowerVolume():void		{			_music.lowerVolume(_music.MUSIC_VOLUME/2);		}		public function raiseVolume():void		{			_music.raiseVolume(_music.MUSIC_VOLUME);		}		public function pauseAudio():void		{			_music.pauseAudio();		}		public function resumeAudio():void		{			_music.resumeAudio();		}		private function audioCompleteAdvance(e:Event):void		{			_audio.removeEventListener(Event.COMPLETE, audioCompleteAdvance);			advanceScreen();		}		private function audioComplete(e:Event):void		{			_audio.removeEventListener(Event.COMPLETE, audioComplete);		}		private function checkStatus(e:Event):void		{			if (alpha == 0)			{				showScreen();			}			if (currentFrame == totalFrames)			{				removeListeners();				hideScreen();			}		}		public function advanceScreen():void		{			nextFrame();		}		public function previousScreen():void		{			prevFrame();		}		public function advanceTraining():void		{			reset();		}		private function showScreen():void		{			try			{				_stage = MovieClip(this.parent.parent.parent);			}			catch (e:Error)			{			}			gotoAndStop(1);			new TweenLite(this,TWEEN_SPEED,{alpha:1,onComplete:animate});		}		protected function animate():void		{		}		protected function showContent():void		{			advanceScreen();		}		protected function setTrainingData(d$:String, v$:*):void		{			try			{				_stage.setTrainingData(d$, v$);			}			catch (e:Error)			{			}		}		protected function getTrainingData(d$:String):*		{			try			{				var trainingData:* = _stage.getTrainingData(d$);			}			catch (e:Error)			{			}			return trainingData;		}		protected function hideScreen():void		{			_music.fadeMusic();			new TweenLite(this,TWEEN_SPEED,{alpha:0,onComplete:advanceTraining});		}		protected function fireEvent(e$:String):void		{			dispatchEvent(new TrainingEvent(e$, true, true));		}		protected function reset():void		{			fireEvent(TrainingEvent.SECTION_COMPLETE);		}	}}