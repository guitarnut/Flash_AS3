package com{	import flash.display.MovieClip;	import com.greensock.TweenLite;	import com.greensock.OverwriteManager;	import com.starz.events.TrainingEvent;	import com.starz.constants.ApplicationSettings;	import flash.media.SoundMixer;	import com.starz.view.components.Header;	import com.starz.view.screens.Intro;	import com.starz.view.screens.LocationOne;	import com.starz.view.screens.LocationTwo;	import com.starz.view.screens.LocationThree;	import com.starz.view.screens.TravelScreen;	import com.starz.view.screens.Title;	import com.starz.view.screens.PassportScreen;	import com.starz.view.screens.Assessment;	import com.starz.view.screens.End;	import com.starz.view.screens.Promotion;	import com.starz.view.screens.Stamps;	import com.starz.utils.AnalyticsManager;	public class Main extends MovieClip	{		private static const TWEEN_SPEED:Number = .25;		private static const CONTENT_LEVEL:Number = 1;		private var _ga:AnalyticsManager;		private var _header:Header;		private var _travel:TravelScreen;		private var _passport:PassportScreen;		private var _stamps:Stamps;		private var _stampEarned:Boolean = false;		private var _introComplete:Boolean = false;		private var _trainingComplete:Boolean = false;		private var _assessmentComplete:Boolean = false;		public function Main()		{			init();		}		private function init():void		{			stop();			OverwriteManager.init(OverwriteManager.NONE);			_ga = new AnalyticsManager();			startTraining();			addListeners();			addEventListener(TrainingEvent.SECTION_COMPLETE, handleListener);			addEventListener(TrainingEvent.LOCATION_ONE_COMPLETE, handleListener);			addEventListener(TrainingEvent.LOCATION_TWO_COMPLETE, handleListener);			addEventListener(TrainingEvent.LOCATION_THREE_COMPLETE, handleListener);			addEventListener(TrainingEvent.GOTO_INTRO, handleListener);			addEventListener(TrainingEvent.GOTO_PROMOTION_ONE, handleListener);			addEventListener(TrainingEvent.PROMOTION_ONE_COMPLETE, handleListener);			addEventListener(TrainingEvent.GOTO_ASSESSMENT, handleListener);			addEventListener(TrainingEvent.ASSESSMENT_COMPLETE, handleListener);			addEventListener(TrainingEvent.QUESTION_PASSED, handleListener);			addEventListener(TrainingEvent.QUESTION_FAILED, handleListener);			addEventListener(TrainingEvent.GOTO_STAMPS_SCREEN, handleListener);			addEventListener(TrainingEvent.GOTO_TRAVEL_SCREEN, handleListener);			addEventListener(TrainingEvent.QUIT, handleListener);		}		private function addListeners():void		{			_travel.addEventListener(TrainingEvent.GOTO_LOCATION_ONE, handleListener);			_travel.addEventListener(TrainingEvent.GOTO_LOCATION_TWO, handleListener);			_travel.addEventListener(TrainingEvent.GOTO_LOCATION_THREE, handleListener);			_travel.addEventListener(TrainingEvent.GOTO_END_SCREEN, handleListener);			_passport.addEventListener(TrainingEvent.PASSPORT_COMPLETE, handleListener);		}		private function removeListeners():void		{			_travel.removeEventListener(TrainingEvent.GOTO_LOCATION_ONE, handleListener);			_travel.removeEventListener(TrainingEvent.GOTO_LOCATION_TWO, handleListener);			_travel.removeEventListener(TrainingEvent.GOTO_LOCATION_THREE, handleListener);			_travel.removeEventListener(TrainingEvent.GOTO_END_SCREEN, handleListener);			_passport.removeEventListener(TrainingEvent.PASSPORT_COMPLETE, handleListener);		}		private function startTraining():void		{			_header = new Header();			_travel = new TravelScreen();			_passport = new PassportScreen();			_stamps = new Stamps();			addChild(new Title());			addChild(_travel);			addChild(_passport);			addChild(_header);			addChild(_stamps);		}		private function handleListener(e:*):void		{			_ga.track(e);			switch (e.type)			{				case TrainingEvent.QUESTION_PASSED :					handleStamp();					break;				case TrainingEvent.QUESTION_FAILED :					handleStamp(false);					break;				case TrainingEvent.GOTO_INTRO :					cleanupStage();					addChildAt(new Intro(),CONTENT_LEVEL);					break;				case TrainingEvent.GOTO_LOCATION_ONE :					contentScreen();					addChildAt(new LocationOne(),CONTENT_LEVEL);					_header.location("Miami Beach, FL");					_header.keyMessage("STARZ is captivating original series that take you places");					break;				case TrainingEvent.GOTO_LOCATION_TWO :					contentScreen();					addChildAt(new LocationTwo(),CONTENT_LEVEL);					_header.location("Hollywood, CA");					_header.keyMessage("STARZ is big hit movies for everyone");					break;				case TrainingEvent.GOTO_LOCATION_THREE :					contentScreen();					addChildAt(new LocationThree(),CONTENT_LEVEL);					_header.location("Everywhere");					_header.keyMessage("Give your customers more value, anytime, anywhere");					break;				case TrainingEvent.GOTO_PROMOTION_ONE :					addChildAt(new Promotion(),CONTENT_LEVEL);					toggleHeader();					break;				case TrainingEvent.GOTO_END_SCREEN :					contentScreen();					addChildAt(new End(),CONTENT_LEVEL);					_header.location("Training End");					_header.keyMessage("STARZ is taking you places");					break;				case TrainingEvent.GOTO_ASSESSMENT :					cleanupStage();					contentScreen();					addChildAt(new Assessment(),CONTENT_LEVEL);					_header.location("Bonus Questions");					_header.keyMessage("");					break;				case TrainingEvent.GOTO_TRAVEL_SCREEN :					cleanupStage();					checkTrainingStatus();					travelScreen();					break;				case TrainingEvent.GOTO_STAMPS_SCREEN :					_stamps.showMC();					break;				case TrainingEvent.QUIT :					reset();					break;				case TrainingEvent.LOCATION_ONE_COMPLETE :					_travel.location1 = true;					_stamps.addStamp('Location One');					break;				case TrainingEvent.LOCATION_TWO_COMPLETE :					_travel.location2 = true;					_stamps.addStamp('Location Two');					break;				case TrainingEvent.LOCATION_THREE_COMPLETE :					_travel.location3 = true;					_stamps.addStamp('Location Three');					break;				case TrainingEvent.PROMOTION_ONE_COMPLETE :					_travel.promotion = true;					cleanupStage();					contentScreen();					addChildAt(new End(),CONTENT_LEVEL);					_header.location("Training End");					break;				case TrainingEvent.ASSESSMENT_COMPLETE :					cleanupStage();					contentScreen();					_assessmentComplete = true;					addChildAt(new End(),CONTENT_LEVEL);					_header.location("Training End");					break;				case TrainingEvent.SECTION_COMPLETE :					cleanupStage();					checkTrainingStatus();					//We don't need the passport screen after the intro or during replays of old sections					if ((_introComplete)&&(!_trainingComplete))					{						passportScreen();					}					else					{						_introComplete = true;						travelScreen();					}					break;				case TrainingEvent.PASSPORT_COMPLETE :					travelScreen();					break;			}		}		private function handleStamp($b:Boolean=true):void		{			if ($b)			{				_stampEarned = true;			}			else			{				_stampEarned = false;			}		}		private function travelScreen():void		{			_travel.showMC(.5);			toggleHeader();		}		private function passportScreen():void		{			_passport.showMC(.5);			if (_stampEarned)			{				_passport.stampWin();			}			else			{				_passport.stampFail();			}			toggleHeader();		}		private function contentScreen():void		{			_travel.hideMC();			toggleHeader(true);		}		private function cleanupStage():void		{			removeChildAt(CONTENT_LEVEL);			SoundMixer.stopAll();		}		private function toggleHeader($b:Boolean=false)		{			if ($b)			{				_header.showMC();			}			else			{				_header.hideMC();			}		}		private function checkTrainingStatus():void		{			if (_travel.complete)			{				_trainingComplete = true;			}		}		private function reset():void		{			SoundMixer.stopAll();			_stampEarned = false;			_introComplete = false;			_trainingComplete = false;			_assessmentComplete = false;			for (var i:Number=numChildren-1; i>=CONTENT_LEVEL; i--)			{				removeChildAt(i);			}			removeListeners();			startTraining();			addListeners();		}	}}