package com.starz.view{	import com.starz.view.GameScreen;	import com.starz.constants.Achievements;	import com.greensock.TweenLite;	import flash.events.Event;	public class GameHUD extends GameScreen	{		private static const SCORE_INCREMENT:Number = 1000;		public var achievements:Array;		public var triviaAces:Number = 0;		public var brokenTVs:Number = 0;		public var bonusItems:Number = 0;		public var currentScore:Number;		public var newScore:Number;		private var targetScore:Number = 0;		private var _achievementTween:TweenLite;		public function GameHUD():void		{			init();		}		private function init():void		{			scoreText.text = "0";		}		public function animate():void {			for (var i:Number = 1; i < this.numChildren; i++)			{				getChildAt(i).alpha = 1;			}		}		public function updateScore(score:Number):void		{			if(targetScore > 0) {				targetScore += score;			} else {				targetScore = score;			}			currentScore = Number(scoreText.text);			if (score > 0)			{				//playSoundFX("Points up");				addEventListener(Event.ENTER_FRAME, increaseScore);			}			else			{				//playSoundFX("Points down");				addEventListener(Event.ENTER_FRAME, decreaseScore);			}		}		private function increaseScore(e:Event):void		{			if (currentScore < targetScore - SCORE_INCREMENT)			{				currentScore +=  SCORE_INCREMENT;				scoreText.text = String(currentScore);			}			else			{				removeEventListener(Event.ENTER_FRAME, increaseScore);				scoreText.text = String(targetScore);			}		}		private function decreaseScore(e:Event):void		{			if (currentScore > targetScore + SCORE_INCREMENT)			{				currentScore -=  SCORE_INCREMENT;				scoreText.text = String(currentScore);			}			else			{				removeEventListener(Event.ENTER_FRAME, decreaseScore);				scoreText.text = String(targetScore);			}		}		public function showAchievement(achievement:String):void		{			if (checkAchievements(achievement))			{				switch (achievement)				{					case Achievements.GREAT_RATINGS :						addChild(new GreatRatings);						break;					case Achievements.DEAD_BATTERIES:						addChild(new DeadBatteries);						break;					case Achievements.CAPTIVE_AUDIENCE:						addChild(new CaptiveAudience);						break;					case Achievements.COUCH_POTATO:						addChild(new CouchPotato);						break;					case Achievements.IN_CONTROL:						addChild(new InControl);						break;					case Achievements.RERUN:						addChild(new Rerun);						break;					case Achievements.THE_PRICE_IS_WRONG:						addChild(new ThePriceIsWrong);						break;					case Achievements.BAD_RECEPTION:						addChild(new BadReception);						break;				}				analytics("Achievement: "+achievement);				playSoundFX(new AchievementFX(), true);			}		}		private function checkAchievements(achievement:String):Boolean		{			var newAchievement:Boolean = true;			if (achievements)			{				var duplicate:Boolean = false;				for (var i:Number = 0; i< achievements.length; i++)				{					if (achievements[i] == achievement)					{						duplicate = true;						newAchievement = false;					}				}				if (! duplicate)				{					achievements.push(achievement);				}			}			else			{				achievements = new Array();				achievements.push(achievement);			}			return newAchievement;		}		public function gameOver():void		{			//analytics("Game completed");		}		public function resetHUD():void {//			analytics("Replay Game");			scoreText.text = "0";			targetScore = 0;			currentScore = 0;			newScore = 0;			triviaAces = 0;			brokenTVs = 0;			bonusItems = 0;		}	}}