package com{	import flash.display.MovieClip;	import com.starz.events.GameEvent;	import com.starz.view.GameHUD;	import com.starz.view.screens.IntroScreenContainer;	import com.starz.view.screens.TitleScreen;	import com.starz.view.screens.TriviaScreenOne;	import com.starz.view.screens.TriviaScreenTwo;	import com.starz.view.screens.InstructionsScreen;	import com.starz.view.screens.EndingScreen;	import com.starz.view.screens.GameplayScreen;	import com.starz.view.GameScreen;	import com.starz.view.screens.VideoScreen;	import com.starz.control.AnalyticsManager;	import com.starz.events.AnalyticsEvent;	import com.starz.core.media.video.VideoPlayerLite;	import com.starz.constants.ApplicationSettings;	import com.starz.view.screens.TransitionScreen;	import flash.events.Event;	public class InControl extends MovieClip	{		/* User Data */		public var analyticsManager:AnalyticsManager;		/* Game Screens */		public var hud:GameHUD;		private var _container:IntroScreenContainer;		private var _titleScreen:TitleScreen;		private var _instructionsScreen:InstructionsScreen;		private var _videoScreen:VideoScreen;		private var _gameplayScreen:GameplayScreen;		private var _triviaScreenOne:TriviaScreenOne;		private var _triviaScreenTwo:TriviaScreenTwo;		private var _endingScreen:EndingScreen;		private var _transitionScreen:TransitionScreen;		private var _currentScreen:*;		/* Misc items */		private var _round:Number = 1;				private var vid:VideoPlayerLite = new VideoPlayerLite();		public function InControl():void		{			init();		}		private function init():void		{			initializeAnalyticsManager();			createScreens();			addListeners();			startGame();		}		private function initializeAnalyticsManager():void		{			analyticsManager = new AnalyticsManager();		}		private function createScreens():void		{			_container = new IntroScreenContainer();			addChild(_container);						_titleScreen = new TitleScreen();			_container.addChild(_titleScreen);			_instructionsScreen = new InstructionsScreen();			_container.addChild(_instructionsScreen);						_videoScreen = new VideoScreen();			_container.addChild(_videoScreen);			_gameplayScreen = new GameplayScreen();			addChild(_gameplayScreen);			_triviaScreenOne = new TriviaScreenOne();			addChild(_triviaScreenOne);			_triviaScreenTwo = new TriviaScreenTwo();			addChild(_triviaScreenTwo);						_endingScreen = new EndingScreen();			addChild(_endingScreen);			hud = new GameHUD();			addChild(hud);						_transitionScreen = new TransitionScreen();			addChild(_transitionScreen);						_container.setScreens(_titleScreen, _instructionsScreen, _videoScreen);		}		private function addListeners():void		{			hud.addEventListener(AnalyticsEvent.EVENT_TRACKING, trackAnalytics);						_titleScreen.addEventListener(GameEvent.SHOW_TITLE, titleScreen);			_titleScreen.addEventListener(GameEvent.SHOW_INSTRUCTIONS, instructionsScreen);			_titleScreen.addEventListener(GameEvent.SHOW_VIDEO, videoScreen);			_titleScreen.addEventListener(AnalyticsEvent.EVENT_TRACKING, trackAnalytics);						_instructionsScreen.addEventListener(GameEvent.ACHIEVEMENT, showAchievement);			_instructionsScreen.addEventListener(GameEvent.SHOW_TITLE, titleScreen);			_instructionsScreen.addEventListener(GameEvent.SHOW_VIDEO, videoScreen);			_instructionsScreen.addEventListener(AnalyticsEvent.EVENT_TRACKING, trackAnalytics);						_videoScreen.addEventListener(GameEvent.START_GAME, startLevel);			_videoScreen.addEventListener(GameEvent.START_GAME, hideContainer);			_gameplayScreen.tvWall.addEventListener(GameEvent.UPDATE_SCORE, updateScore);			_gameplayScreen.tvWall.addEventListener(GameEvent.BAD_CLICK, brokenTV);			_gameplayScreen.tvWall.addEventListener(GameEvent.BONUS_CLICK, bonusItem);			_gameplayScreen.addEventListener(GameEvent.LEVEL_COMPLETE, levelComplete);			_gameplayScreen.addEventListener(GameEvent.ACHIEVEMENT, showAchievement);			_gameplayScreen.addEventListener(AnalyticsEvent.EVENT_TRACKING, trackAnalytics);			_triviaScreenOne.addEventListener(GameEvent.UPDATE_SCORE, updateScore);			_triviaScreenOne.addEventListener(GameEvent.LEVEL_COMPLETE, triviaComplete);			_triviaScreenOne.addEventListener(GameEvent.ACHIEVEMENT, showAchievement);			_triviaScreenOne.addEventListener(GameEvent.TRIVIA_ACED, triviaAced);			_triviaScreenOne.addEventListener(AnalyticsEvent.EVENT_TRACKING, trackAnalytics);			_triviaScreenTwo.addEventListener(GameEvent.UPDATE_SCORE, updateScore);			_triviaScreenTwo.addEventListener(GameEvent.LEVEL_COMPLETE, triviaComplete);			_triviaScreenTwo.addEventListener(GameEvent.ACHIEVEMENT, showAchievement);			_triviaScreenTwo.addEventListener(GameEvent.TRIVIA_ACED, triviaAced);			_triviaScreenTwo.addEventListener(AnalyticsEvent.EVENT_TRACKING, trackAnalytics);						_endingScreen.addEventListener(GameEvent.ACHIEVEMENT, showAchievement);			_endingScreen.addEventListener(GameEvent.REPLAY_GAME, replayGame);		}		private function startGame():void		{			_container.showMe();			_container.animate();			_container.showTitle();		}		private function titleScreen(e:GameEvent = null):void		{			_container.showTitle();		}		private function instructionsScreen(e:GameEvent = null):void		{			_container.showInstructions();		}		private function videoScreen(e:GameEvent = null):void {			_container.showVideo();		}		private function hideContainer(e:GameEvent = null):void {			_container.hideMe();		}		private function startLevel(e:GameEvent = null):void		{			setDifficulty();			showScreen(_gameplayScreen);		}		private function startTrivia():void		{			trace("It's round "+_round);			switch (_round)			{				case 1 :					showScreen(_triviaScreenOne);					_triviaScreenOne.startRound();					break;				case 2 :					showScreen(_triviaScreenTwo);					_triviaScreenTwo.startRound();					break;				case 3 :					endGame();					break;			}		}		private function levelComplete(e:GameEvent):void		{			startTrivia();		}		private function triviaComplete(e:GameEvent):void		{			advanceRound();		}		private function advanceRound():void		{			_round++;			startLevel();		}		private function showScreen(screen:*):void		{			if (_currentScreen)			{				_currentScreen.hideMe();			}			_currentScreen = screen;						_transitionScreen.addEventListener(Event.COMPLETE, finishTransition);			_transitionScreen.show();		}		private function finishTransition(e:Event):void {			hud.showMe();			hud.animate();			_currentScreen.showMe();			_currentScreen.animate();		}		private function endGame():void		{			hud.gameOver();			_endingScreen.finalScores(hud.currentScore, hud.triviaAces, hud.brokenTVs, hud.bonusItems, hud.achievements);			showScreen(_endingScreen);		}		private function setDifficulty():void		{			switch (_round)			{				case 1 :					_gameplayScreen.setDifficulty(ApplicationSettings.TV_TIMER_TIME_EASY);					break;				case 2 :					_gameplayScreen.setDifficulty(ApplicationSettings.TV_TIMER_TIME_MEDUIM);					break;				case 3 :					_gameplayScreen.setDifficulty(ApplicationSettings.TV_TIMER_TIME_DIFFICULT);					break;			}		}		private function triviaAced(e:GameEvent):void		{			hud.triviaAces++;		}		private function updateScore(e:GameEvent):void		{			hud.updateScore(e.gameData.points);		}		private function brokenTV(e:GameEvent):void		{			hud.brokenTVs++;		}		private function bonusItem(e:GameEvent):void		{			hud.bonusItems++;		}		private function showAchievement(e:GameEvent):void		{			hud.showAchievement(e.gameData.achievement);		}		private function trackAnalytics(e:AnalyticsEvent):void		{			analyticsManager.track(e);		}		private function replayGame(e:GameEvent):void {			hud.resetHUD();			_container.reset();			_titleScreen.reset();			_instructionsScreen.reset();			_videoScreen.reset();			_gameplayScreen.reset();			_triviaScreenOne.reset();			_triviaScreenTwo.reset();			_endingScreen.reset();						_round = 1;						hud.hideMe();			_currentScreen.hideMe();			startGame();		}	}}