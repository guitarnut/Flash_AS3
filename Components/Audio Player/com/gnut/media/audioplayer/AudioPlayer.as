package com.gnut.media.audioplayer{	import flash.display.MovieClip;	import com.gnut.media.audioplayer.events.AudioPlayerEvent;	import com.gnut.media.audioplayer.components.*;	import flash.media.Sound;	import flash.events.Event;	public class AudioPlayer extends MovieClip	{		private static const TRACK_LIMIT:Number = 8;		private static const STARTING_VOLUME:Number = .9;		private var _autoStart:Boolean = false;		private var _loader:TrackLoader;		private var _am:AudioManager;		private var _tracks:Array;		private var _play:PlayButton;		private var _prevTrack:SkipButton;		private var _nextTrack:SkipButton;		private var _progress:TrackProgressBar;		private var _mute:MuteButton;		private var _equalizer:EqualizerMC;		private var _volume:TrackVolumeControl;		private var _currentTrack:TrackButton;		private var _trackCount:Number;		public function AudioPlayer()		{			init();		}		private function init():void		{			_tracks = new Array();			_am = new AudioManager();			buildPlayer();			addListeners();		}		private function buildPlayer():void		{			_play = new PlayButton(b_playPause);			_prevTrack = new SkipButton(b_prev);			_nextTrack = new SkipButton(b_next);			_mute = new MuteButton(b_mute);			_equalizer = new EqualizerMC();			_progress = new TrackProgressBar(mc_progressBar);			_volume = new TrackVolumeControl(mc_volume);			playerReady();		}		private function buildTracks(e:AudioPlayerEvent):void		{			if (_loader.tracks.length < TRACK_LIMIT)			{				for each (var $a:Array in _loader.tracks)				{					var $t:TrackButton = new TrackButton();					$t.trackName = $a[0];					$t.trackFile = $a[1];					$t.buttonOff();					$t.y = this.height - $t.height - 5;					if (_tracks.length > 0)					{						$t.x = ($t.width+3)*_tracks.length + 11;					}					else					{						$t.x = 11;					}					$t.txt_track.text = String(_tracks.length + 1);					_tracks.push($t);					addChild($t);				}			}			else			{				trace('AudioPlayer.as: Maximum number of tracks exceeded.');			}			if (_autoStart)			{				playTrack(_tracks[0]);			}		}		private function playerReady():void		{			_trackCount = 0;			_volume.volume = STARTING_VOLUME;			_am.volume = _volume.volume;			unmute();			addEventListener(Event.ENTER_FRAME, updateView);		}		private function addListeners():void		{			stage.addEventListener(AudioPlayerEvent.BUTTON_CLICKED, handleClick);			stage.addEventListener(AudioPlayerEvent.TRACK_CLICKED, changeTrack);			stage.addEventListener(AudioPlayerEvent.VOLUME_CLICKED, changeVolume);			_am.addEventListener(AudioPlayerEvent.TRACK_COMPLETE, nextTrack);		}		private function removeListeners():void		{			removeEventListener(AudioPlayerEvent.BUTTON_CLICKED, handleClick);		}		private function handleClick(e:AudioPlayerEvent):void		{			switch (e.target.name)			{				case 'b_playPause' :					if (_play.paused)					{						_am.command = 'resume';						_play.paused = false;						if (_mute.muted)						{							unmute();						}					}					else					{						_am.command = 'pause';						_play.paused = true;					}					break;				case 'b_prev' :					previousTrack();					break;				case 'b_next' :					nextTrack();					break;				case 'b_mute' :					if (_mute.muted)					{						unmute();					}					else					{						mute();					}					break;				default :					break;			}		}		private function mute():void		{			_volume.mute();			_am.command = 'mute';			_mute.muted = true;		}		private function unmute():void		{			_volume.unmute();			_am.command = 'unmute';			_mute.muted = false;		}		private function previousTrack(e:AudioPlayerEvent = null):void		{			_currentTrack.buttonOff();			_trackCount--;			if (_trackCount<0)			{				_trackCount = _tracks.length-1;			}			playTrack(_tracks[_trackCount]);		}		private function nextTrack(e:AudioPlayerEvent = null):void		{			_currentTrack.buttonOff();			_trackCount++;			if (_trackCount==_tracks.length)			{				_trackCount = 0;			}			playTrack(_tracks[_trackCount]);		}		private function changeTrack(e:AudioPlayerEvent):void		{			if (_currentTrack)			{				_currentTrack.buttonOff();			}			var $b:TrackButton = TrackButton(e.target);			playTrack($b);		}		private function playTrack($b:TrackButton):void		{			$b.buttonOn();			var $t:String = $b.trackName;			var $mp3:Sound = $b.trackFile;			_currentTrack = $b;			_trackCount = getTrackPosition($b);			updateTrackName($t);			_play.paused = false;			if (_mute.muted)			{				unmute();			}			_am.audio = $mp3;		}		private function getTrackPosition($t:TrackButton):Number		{			var $n:Number;			for (var i:Number=0; i<_tracks.length; i++)			{				if ($t == TrackButton(_tracks[i]))				{					$n = i;					break;				}			}			return $n;		}		private function changeVolume(e:AudioPlayerEvent = null):void		{			_am.volume = _volume.volume;		}		private function updateView(e:Event=null):void		{			txt_trackTime.text = _am.audioTime;			_progress.updateProgress(_am.audioProgress);		}		private function updateTrackName($t:String):void		{			txt_trackInfo.text = $t;		}		private function destroy():void		{			visible = false;		}		/***************************************************/		//Available Methods		/***************************************************/		public function autoStart():void		{			_autoStart = true;		}		public function adjustVolume($v:Number=0.01):void		{			_volume.volume = $v;			_am.volume = $v;		}		public function addTracks($t:Array):void		{			_loader = new TrackLoader();			_loader.addEventListener(AudioPlayerEvent.TRACKS_LOADED, buildTracks);			_loader.loadTracks($t);		}	}}