package com.gnut.media.audioplayer{	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.display.MovieClip;	import flash.utils.ByteArray;	import flash.media.SoundMixer;	public class AudioManager extends MovieClip	{		private var _sc:SoundChannel;		private var _mp3:Sound;		private var _volume:Number;		private var _savedVolume:Number;		private var _savedPosition:Number;		private var _playing:Boolean;		public function AudioManager()		{			init();		}		private function init():void		{			_sc = new SoundChannel  ;			_playing = false;			_savedPosition = 0;		}		private function addListeners():void		{		}		private function removeListeners():void		{		}		private function adjustVolume():void		{			if (_playing)			{				var $t:SoundTransform = new SoundTransform  ;				$t.volume = _volume;				_sc.soundTransform = $t;			}		}		private function playAudio():void		{			_playing = true;			_sc.stop();			_sc = _mp3.play();			adjustVolume();		}		private function pauseAudio():void		{			_savedPosition = _sc.position;			_sc.stop();		}		private function resumeAudio():void		{			_sc = _mp3.play(_savedPosition);		}		private function stopAudio():void		{			_sc.stop();			_savedPosition = 0;		}		private function trackComplete():void		{			stopAudio();		}		public function set audio($mp3: * ):void		{			_mp3 = $mp3;			playAudio();		}		public function set volume($v:Number):void		{			_volume = $v;			adjustVolume();		}		public function set command($c:String):void		{			switch ($c)			{				case 'play' :					playAudio();					break;				case 'resume' :					resumeAudio();					break;				case 'pause' :					pauseAudio();					break;				case 'stop' :					stopAudio();					break;				case 'mute' :					_savedVolume = _volume;					_volume = 0;					adjustVolume();					break;				case 'unmute' :					_volume = _savedVolume;					adjustVolume();					break;				default :					break;			}		}		public function get audioTime():String		{			var $t:String = '';			if ((_sc.position)&&(_mp3.length))			{				var $totalMinutes:String = String(Math.floor((_mp3.length/1000)/60));				var $totalSeconds:String = String(Math.round((_mp3.length/1000) % 60));				if ($totalSeconds.length == 1)				{					$totalSeconds = '0' + $totalSeconds;				}				if ($totalSeconds == '60')				{					$totalSeconds = '00';					$totalMinutes = String(Number($totalMinutes)+1);				}				if ($totalMinutes.length == 1)				{					$totalMinutes = '0' + $totalMinutes;				}				var $elapsedMinutes:String = String(Math.floor((_sc.position/1000)/60));				var $elapsedSeconds:String = String(Math.round((_sc.position/1000) % 60));				if ($elapsedSeconds.length == 1)				{					$elapsedSeconds = '0' + $elapsedSeconds;				}				if ($elapsedSeconds == '60')				{					$elapsedSeconds = '00';					$elapsedMinutes = String(Number($elapsedMinutes)+1);				}				if ($elapsedMinutes.length == 1)				{					$elapsedMinutes = '0' + $elapsedMinutes;				}				$t = String($elapsedMinutes+':'+$elapsedSeconds+' | '+$totalMinutes+':'+$totalSeconds);			}			return $t;		}		public function get audioProgress():Number		{			var $p:Number = 0;			if ((_sc.position)&&(_mp3.length))			{				$p = _sc.position / _mp3.length;			}			return $p;		}		public function get audioSpectrum():ByteArray		{			var $b:ByteArray = new ByteArray();			SoundMixer.computeSpectrum($b, false, 0);			return $b;		}	}}