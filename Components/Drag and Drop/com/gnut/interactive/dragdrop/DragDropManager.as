package com.gnut.interactive.dragdrop{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.DisplayObjectContainer;	import com.greensock.TweenLite;	import com.greensock.easing.Quad;	public class DragDropManager	{		private static const TWEEN_SPEED:Number = .3;		private var _pairs:Array;		private var _startingX:Number;		private var _startingY:Number;		private var _currentDrag:MovieClip;		private var _currentTarget:MovieClip;		private var _hit:Boolean;		private var _correctAnswers:Number;		public function DragDropManager()		{			init();		}		private function init():void		{			_pairs = new Array();			_correctAnswers = 0;			_hit = false;		}		public function pairObjects($mc:MovieClip, $mc2:Array):void		{			_pairs.push(new Array($mc, $mc2));			createTarget($mc);			if ($mc2)			{				for each (var mc:MovieClip in $mc2)				{					createDraggableObject(mc);					mc.buttonMode = true;					mc.mouseChildren = false;				}			}		}		private function createDraggableObject($mc:MovieClip):void		{			$mc.addEventListener(MouseEvent.MOUSE_DOWN, dragMC);			$mc.addEventListener(MouseEvent.MOUSE_UP, dropMC);			unhighlightDraggedObject($mc);		}		private function createTarget($mc:MovieClip):void		{			unhighlightTarget($mc);		}		private function dragMC(e:MouseEvent):void		{			var mc:MovieClip = MovieClip(e.target);			highlightDraggedObject(mc);			_startingX = mc.x;			_startingY = mc.y;			setDropTarget(mc);			mc.startDrag();			mc.addEventListener(Event.ENTER_FRAME, testHit);		}		private function dropMC(e:MouseEvent):void		{			var mc:MovieClip = MovieClip(e.target);			mc.removeEventListener(Event.ENTER_FRAME, testHit);			mc.stopDrag();			if (_hit)			{				_hit = false;				correctHit(mc);			}			else			{				resetDraggedObject(mc);			}		}		private function setDropTarget($mc):void		{			_currentDrag = $mc;			for (var i:Number = 0; i < _pairs.length; i++)			{				var $p:Array = _pairs[i];				if ($p[1])				{					var $t:Array = $p[1];					for (var j:Number = 0; j < $t.length; j++)					{						if ($mc==$t[j])						{							_currentTarget = $p[0];							break;						}					}				}			}		}		private function testHit(e:Event = null):void		{			if (_currentDrag.hitTestObject(_currentTarget))			{				_hit = true;			}			else			{				_hit = false;			}			for (var i:Number = 0; i < _pairs.length; i++)			{				var $p:Array = _pairs[i];				var $mc:MovieClip = $p[0];				if (_currentDrag.hitTestObject($mc))				{					highlightTarget($mc);				}				else				{					unhighlightTarget($mc);				}			}		}		/********************************************************/		//Custom Effects		/********************************************************/		//Toggle the highlighting of the object you're dragging		private function highlightDraggedObject($mc):void		{			$mc.alpha = 1;		}		private function unhighlightDraggedObject($mc):void		{			$mc.alpha = .7;		}		//Toggle the highlighting of the target when the dragged object touches it		private function highlightTarget($mc):void		{			$mc.alpha = 1;		}		private function unhighlightTarget($mc):void		{			$mc.alpha = .7;		}		//Handle a correct answer		private function correctHit($mc):void		{			$mc.removeEventListener(MouseEvent.MOUSE_DOWN, dragMC);			$mc.removeEventListener(MouseEvent.MOUSE_UP, dropMC);			DisplayObjectContainer($mc.parent).removeChild($mc);			_correctAnswers++;						unhighlightTarget(_currentTarget);						trace('Current score: '+_correctAnswers);					}		//Handle an incorrect answer		private function resetDraggedObject($mc):void		{			new TweenLite($mc, TWEEN_SPEED, {x:_startingX, y: _startingY, ease: Quad.easeOut, onComplete: testHit});			unhighlightDraggedObject($mc);		}		//Return the number of correct answers		public function get score():Number		{			return _correctAnswers;		}	}}